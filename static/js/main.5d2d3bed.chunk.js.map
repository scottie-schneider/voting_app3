{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","generateVoteCount","Math","floor","random","products","id","title","description","url","votes","submitterAvatarUrl","productImageUrl","Product","handleUpVote","_this","props","onVote","react_default","a","createElement","className","src","this","onClick","href","Component","App","state","handleProductUpVote","productId","nextProducts","_this2","map","product","Object","assign","setState","_this3","productComponents","sort","b","App_Product","key","concat","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6KCIlCC,eAAoB,WACxB,OAAOC,KAAKC,MAAsB,GAAhBD,KAAKE,SAAgB,MAGnCC,EAAW,CACf,CACEC,GAAI,EACJC,MAAO,cACPC,YAAa,gDACbC,IAAK,IACLC,MAAOT,IACPU,mBAAoB,+BACpBC,gBAAiB,kCAEnB,CACEN,GAAI,EACJC,MAAO,6CACPC,YACE,+DACFC,IAAK,IACLC,MAAOT,IACPU,mBAAoB,+BACpBC,gBAAiB,kCAEnB,CACEN,GAAI,EACJC,MAAO,kCACPC,YAAa,0DACbC,IAAK,IACLC,MAAOT,IACPU,mBAAoB,iCACpBC,gBAAiB,mCAEnB,CACEN,GAAI,EACJC,MAAO,mBACPC,YAAa,4CACbC,IAAK,IACLC,MAAOT,IACPU,mBAAoB,8BACpBC,gBAAiB,qCAIfC,6MACJC,aAAe,kBAAMC,EAAKC,MAAMC,OAAOF,EAAKC,MAAMV,6EAGhD,OACEY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,KAAKP,MAAMJ,mBAEvBM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,KAAGI,QAASD,KAAKT,cACfI,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAEdE,KAAKP,MAAMN,OAEdQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,KAAGK,KAAMF,KAAKP,MAAMP,KAAMc,KAAKP,MAAMT,OACrCW,EAAAC,EAAAC,cAAA,SAAIG,KAAKP,MAAMR,cAEjBU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,OACEC,UAAU,kBACVC,IAAKC,KAAKP,MAAML,+BAxBRe,aA6EPC,6MA3CbC,MAAQ,CACNvB,SAAU,MAOZwB,oBAAsB,SAAAC,GACpB,IAAMC,EAAeC,EAAKJ,MAAMvB,SAAS4B,IAAI,SAAAC,GAC3C,OAAIA,EAAQ5B,KAAOwB,EACVK,OAAOC,OAAO,GAAIF,EAAS,CAChCxB,MAAOwB,EAAQxB,MAAQ,IAGlBwB,IAGXF,EAAKK,SAAS,CACZhC,SAAU0B,wFAdZR,KAAKc,SAAS,CAAEhC,SAAUA,qCAkBnB,IAAAiC,EAAAf,KAGDgB,EAFoBhB,KAAKK,MAAMvB,SAASmC,KAAK,SAACrB,EAAGsB,GAAJ,OAAUA,EAAE/B,MAAQS,EAAET,QAE7BuB,IAAI,SAAAC,GAAO,OACrDhB,EAAAC,EAAAC,cAACsB,EAAD,CACEC,IAAG,WAAAC,OAAaV,EAAQ5B,IACxBA,GAAI4B,EAAQ5B,GACZC,MAAO2B,EAAQ3B,MACfC,YAAa0B,EAAQ1B,YACrBC,IAAKyB,EAAQzB,IACbC,MAAOwB,EAAQxB,MACfC,mBAAoBuB,EAAQvB,mBAC5BC,gBAAiBsB,EAAQtB,gBACzBK,OAAQqB,EAAKT,wBAGjB,OAAOX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAAwBkB,UAxChCb,aCrEEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,YD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5d2d3bed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst generateVoteCount = () => {\n  return Math.floor(Math.random() * 50 + 15);\n}\n\nconst products = [\n  {\n    id: 1,\n    title: 'Yellow Pail',\n    description: 'On-demand sand castle construction expertise.',\n    url: '#',\n    votes: generateVoteCount(),\n    submitterAvatarUrl: '../images/avatars/daniel.jpg',\n    productImageUrl: 'images/products/image-aqua.png',\n  },\n  {\n    id: 2,\n    title: 'Supermajority: The Fantasy Congress League',\n    description:\n      'Earn points when your favorite politicians pass legislation.',\n    url: '#',\n    votes: generateVoteCount(),\n    submitterAvatarUrl: '../images/avatars/kristy.png',\n    productImageUrl: 'images/products/image-rose.png',\n  },\n  {\n    id: 3,\n    title: 'Tinfoild: Tailored tinfoil hats',\n    description: 'We already have your measurements and shipping address.',\n    url: '#',\n    votes: generateVoteCount(),\n    submitterAvatarUrl: '../images/avatars/veronika.jpg',\n    productImageUrl: 'images/products/image-steel.png',\n  },\n  {\n    id: 4,\n    title: 'Haught or Naught',\n    description: 'High-minded or absent-minded? You decide.',\n    url: '#',\n    votes: generateVoteCount(),\n    submitterAvatarUrl: '../images/avatars/molly.png',\n    productImageUrl: 'images/products/image-yellow.png',\n  },\n];\n\nclass Product extends Component {\n  handleUpVote = () => this.props.onVote(this.props.id);\n\n  render() {\n    return (\n      <div className=\"item\">\n        <div className=\"image\">\n          <img src={this.props.productImageUrl} />\n        </div>\n        <div className=\"middle aligned content\">\n          <div className=\"header\">\n            <a onClick={this.handleUpVote}>\n              <i className=\"large caret up icon\" />\n            </a>\n            {this.props.votes}\n          </div>\n          <div className=\"description\">\n            <a href={this.props.url}>{this.props.title}</a>\n            <p>{this.props.description}</p>\n          </div>\n          <div className=\"extra\">\n            <span>Submitted by:</span>\n            <img\n              className=\"ui avatar image\"\n              src={this.props.submitterAvatarUrl}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass App extends Component {\n  state = {\n    products: [],\n  };\n  \n  componentDidMount() {\n    this.setState({ products: products });\n  }\n  \n  handleProductUpVote = productId => {\n    const nextProducts = this.state.products.map(product => {\n      if (product.id === productId) {\n        return Object.assign({}, product, {\n          votes: product.votes + 1,\n        });\n      } else {\n        return product;\n      }\n    });\n    this.setState({\n      products: nextProducts,\n    });\n  };\n  \n  render() {\n    const productsToDisplay = this.state.products.sort((a, b) => b.votes - a.votes);\n\n    const productComponents = productsToDisplay.map(product => (\n      <Product\n        key={`product-${product.id}`}\n        id={product.id}\n        title={product.title}\n        description={product.description}\n        url={product.url}\n        votes={product.votes}\n        submitterAvatarUrl={product.submitterAvatarUrl}\n        productImageUrl={product.productImageUrl}\n        onVote={this.handleProductUpVote}\n      />\n    ));\n    return <div className=\"ui unstackable items\">{productComponents}</div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('content'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}